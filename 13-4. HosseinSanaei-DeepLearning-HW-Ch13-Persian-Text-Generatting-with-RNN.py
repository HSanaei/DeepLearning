# -*- coding: utf-8 -*-
"""13-4. HSanaei-ML-HW-Chap13-RNN-Text-Generation-Persion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qO6RsN7pS1R8G8HY7MelnP7xKPE8KcAj
"""

'''
Python Machine Learning
Teacher: Dr Rahmani
Student: Hossein SANAEI ~حسين سنايي

Aras International Campus of University of Tehran
Spring 1401 (2022)
GitHub: https://github.com/HSanaei/DeepLearing.git

Chapter 13:  Writing my Persian book with RNNs

'''
import sys
import numpy
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.callbacks import ModelCheckpoint
from keras.utils import np_utils
import requests

# Loading ascii text and covert to lowercase
MyFile = "/content/drive/MyDrive/Colab Notebooks/BI-01.txt"
raw_text = open(MyFile, 'r', encoding='utf-8').read()
raw_text = raw_text.lower()

# Creating mapping of unique chars to integers, and a reverse mapping
chars = sorted(list(set(raw_text)))
char_to_int = dict((c, i) for i, c in enumerate(chars))
int_to_char = dict((i, c) for i, c in enumerate(chars))

# Summarize the loaded data
n_chars = len(raw_text)
n_vocab = len(chars)
print ("Total Characters: "), n_chars

print ("Total Vocab: "), n_vocab

# Preparing the dataset of input to output pairs encoded as integers
seq_length = 100
dataX = []
dataY = []
for i in range(0, n_chars - seq_length, 1):
	  seq_in = raw_text[i:i + seq_length]
	  seq_out = raw_text[i + seq_length]
	  dataX.append([char_to_int[char] for char in seq_in])
	  dataY.append(char_to_int[seq_out])
n_patterns = len(dataX)
print ("Total Patterns: "), n_patterns

# reshape X to be [samples, time steps, features]
X = numpy.reshape(dataX, (n_patterns, seq_length, 1))

# Normalizing
X = X / float(n_vocab)

# One hot encode the output variable
y = np_utils.to_categorical(dataY)

# Defining the LSTM model
model = Sequential()
model.add(LSTM(700, input_shape=(X.shape[1], X.shape[2]), return_sequences=True))
model.add(Dropout(0.4))
model.add(LSTM(700))
model.add(Dropout(0.4))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam')

# Defining the checkpoint
filepath="weights-improvement-{epoch:02d}-{loss:.4f}-bigger.hdf5"
checkpoint = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')
callbacks_list = [checkpoint]

# Fitting the model
model.fit(X, y, epochs=100, batch_size=100, callbacks=callbacks_list)

# Generating text with Seed 

MyNewFile = "weights-improvement-99-0.0219-bigger.hdf5"
model.load_weights(MyNewFile)
model.compile(loss='categorical_crossentropy', optimizer='adam')

# Picking a random seed
start = numpy.random.randint(0, len(dataX)-1)
pattern = dataX[start]
print ("Seed:")
print ("\"", ''.join([int_to_char[value] for value in pattern]), "\"")

# Finally, generating characters
for i in range(1000):
    x = numpy.reshape(pattern, (1, len(pattern), 1))
    x = x / float(n_vocab)
    prediction = model.predict(x, verbose=0)
    index = numpy.argmax(prediction)
    result = int_to_char[index]
    seq_in = [int_to_char[value] for value in pattern]
    with open('quotes.txt', 'a', encoding='utf-8') as f:
         f.write(result)
    sys.stdout.write(result)
    pattern.append(index)
    pattern = pattern[1:len(pattern)]
  
print ("\nDone.")