# -*- coding: utf-8 -*-
"""13-3. HosseinSanaei-DeepLearning-HW-Ch1-RNN-3Books.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1na3LpNPAOuQXSPufLQb7KNrbNcZ8WQtn
"""

'''
Python Machine Learning
Teacher: Dr Rahmani
Student: Hossein SANAEI ~Õ”Ì‰ ”‰«Ì?

Aras International Campus of University of Tehran
Spring 1401 (2022)
GitHub: https://github.com/HSanaei/DeepLearing.git

Chapter 13-3:  Developping the RNN for 3 books
'''

import sys
import numpy
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.callbacks import ModelCheckpoint
from keras.utils import np_utils
import requests

BookContent1 = requests.get("https://www.gutenberg.org/cache/epub/68630/pg68630.txt").text
BookContent2 = requests.get("https://www.gutenberg.org/cache/epub/68625/pg68625.txt").text
BookContent3 = requests.get("https://www.gutenberg.org/cache/epub/68615/pg68615.txt").text
open("My3Books.txt", "w", encoding="utf-8").write(BookContent1+BookContent2+BookContent3)

# Loading ascii text and covert to lowercase
MyBookFile = "My3Books.txt"
raw_text = open(MyBookFile, 'r', encoding='utf-8').read()
raw_text = raw_text.lower()

# Creating mapping of unique chars to integers, and a reverse mapping
chars = sorted(list(set(raw_text)))
char_to_int = dict((c, i) for i, c in enumerate(chars))
int_to_char = dict((i, c) for i, c in enumerate(chars))

# Summarize the loaded data
n_chars = len(raw_text)
n_vocab = len(chars)
print ("Total Characters: "), n_chars
print ("Total Vocab: "), n_vocab

# Preparing the dataset from input into output and pairing encoded as integers
seq_length = 100
dataX = []
dataY = []
for i in range(0, n_chars - seq_length, 1):
	  seq_in = raw_text[i:i + seq_length]
	  seq_out = raw_text[i + seq_length]
	  dataX.append([char_to_int[char] for char in seq_in])
	  dataY.append(char_to_int[seq_out])

n_patterns = len(dataX)
print ("Total Patterns: "), n_patterns

# Reshape X to be [samples, time steps, features]
X = numpy.reshape(dataX, (n_patterns, seq_length, 1))

# Normalizing
X = X / float(n_vocab)

# One hot encode the output variable
y = np_utils.to_categorical(dataY)

# define the LSTM model
model = Sequential()
model.add(LSTM(256, input_shape=(X.shape[1], X.shape[2]), return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(256))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam')

# Defining the checkpoint
filepath="weights-improvement-{epoch:02d}-{loss:.4f}-bigger.hdf5"
checkpoint = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')
callbacks_list = [checkpoint]

# Fitting the model
model.fit(X, y, epochs=50, batch_size=64, callbacks=callbacks_list)

# Loading the network weights

MyBookFile = "weights-improvement-50-1.4816-bigger.hdf5"
model.load_weights(MyBookFile)
model.compile(loss='categorical_crossentropy', optimizer='adam')

# Picking a random seed
start = numpy.random.randint(0, len(dataX)-1)
pattern = dataX[start]
print ("Seed:")
print ("\"", ''.join([int_to_char[value] for value in pattern]), "\"")

"""# New Section"""

# Finally, generating characters
for i in range(10000):
	  x = numpy.reshape(pattern, (1, len(pattern), 1))
	  x = x / float(n_vocab)
	  prediction = model.predict(x, verbose=0)
	  index = numpy.argmax(prediction)
	  result = int_to_char[index]
	  seq_in = [int_to_char[value] for value in pattern]
	  sys.stdout.write(result)
	  pattern.append(index)
	  pattern = pattern[1:len(pattern)]
 
print ("\nDone.")